type FlowFactory @entity {
  id: ID!
  children: [Flow!] @derivedFrom(field: "factory")
  childrenCount: BigInt!
  implementation: Bytes!
}

type Flow @entity {
  id: ID!
  factory: FlowFactory!
  dispatches: [BigInt!]
  evalEvents: [EvalEvent!] @derivedFrom(field: "flow")
  accounts: [Account!] @derivedFrom(field: "flow")
  stateConfig: StateConfig! @derivedFrom(field: "flow")
  flowCommonConfig: FlowCommonConfig! @derivedFrom(field: "flow")
}

type EvalContext @entity {
  id: ID!
  caller: Account!
  contract: Flow!
  flowID: BigInt!
  signer: Account
  signedContext: [BigInt!]
}

type EvalEvent @entity {
  id: ID! #{transaction.hash}
  evalContext: EvalContext!
  transaction: Transaction!
  timestamp: BigInt!
  emitter: Account!
  flow: Flow!
}

type Transaction @entity(immutable: true) {
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  events: [EvalEvent!] @derivedFrom(field: "transaction")
}

type Account @entity {
  id: ID!
  address: Bytes!
  "Events emitted by this account"
  events: [EvalEvent!] @derivedFrom(field: "emitter")
  flow: Flow!
}

type StateConfig @entity {
  id: ID!
  sources: [Bytes!]!
  constants: [BigInt!]!
  flow: Flow
}

type FlowCommonConfig @entity {
  id: ID!
  expressionDeployer: Bytes!
  interpreter: Bytes!
  stateConfigs: [StateConfig!]!
  flow: Flow!
}